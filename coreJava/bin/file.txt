java.io.File类用于表示文件（目录）
File类只用于表示文件（目录）的信息（名称，大小等），不能用于文件内容的访问

RandomAccessFile java提供的对文件内容的访问，既可以读文件，也可以写文件。
RandomAccessFile 支持随机访问文件，可以访问文件的任意位置

（1）java文件模型
在硬盘上的文件时byte byte byte存储的，是数据的集合
（2）打开文件
有两种模式 ”rw” （读写） “r”(只读)
RandomAccessFile raf = new RandomAccessFile(file,"rw");
文件指针，打开文件时指针在开头pointer = 0;
（3）写方法
raf.write(int)--->只写一个字节（后8位），同时指针指向下一个位置，准备再次写
（4）读方法
int b = raf.read()--->读一个字节
（5）文件读写完成以后一定要关闭（Oracle官方说明）

IO流（输入流，输出流）
字节流，字符流
1.字节流
1）InputStream,OutputStream
  InputStream抽象了应用程序读取数据的方式
  OutputStream抽象了引用程序写出数据的方式
2）EOF = End 读到-1就读到结尾
3）输入流基本方法
int b = int.read();读取一个字节无符号填充到int低八位，-1是EOF
in.read(byte[] buf)读取数据填充到字节组buf
in.read(byte[] buf,int start,intsize)读取数据到字数组buf，从buf的start位置开始存放size长度的数据
4）输出流基本方法
out.write(int b) 写出一个byte到流，写的b的低8位
out.write(byte[] byte)将bug字节数组都写入流
out.write(byte[] buf ,int start,int size)字节数组buf从start位置开始写size长度的字节流
5）FileInputStream -->具体实现了在文件上读取数据
6)FileOutStream实现了向文件中写出byte数据的方法
7)DataOutputStream/DataInputStream
对“流”功能的扩展，可以更加方便的读取int,long，字符等类型数据
DataOutStream
	writeInt()/writeDouble()/writeUTF()
8)BufferedInputStream&BufferedOutputStream
这两个流类位IO提供了带缓冲区的操作，一般打开文件进行写入
或读取操作时，都回家上缓冲，这种流模式提高了IO的性能
从应用程序中吧输入放入文件，相当于将一缸谁导入另一个缸中：
FileOutputStream ---> write()方法相当于一滴一滴地吧水转移过去
DataOutputStream --->  writeXxx()方法会方便一些，相当于一瓢一瓢把谁转移过去
BufferedOutputStream --> write方法更方便，相当于一瓢一瓢先放入桶中，再从桶中倒入到另一个缸中，性能提高了

2字符流
1）编码问题
2）认识文本和文本文件
java的文本（char）是16位无符号整数，是字符的unicode编码（双字节编码）
文件时byte byte byte ..的数据 序列
文本文件时文本（char）序列按照某种编码方案（utf-8，utf-16be,gbk）序列化为byte的存储结果
3）字符流（Reader Writer）--->操作的是文本文本文件
字符的处理，一次处理一个字符
字符的底层任然是基本的字节序列
字符流的基本实现
InputStreamReader 完成byte流解析为char流，按照编码解析
OutputStreamWriter 提供char流到byte流，按照编码处理

FileReader/FileWriter

字符流的过滤器
BufferedReader  ---> readLine一次都一行
BufferedWriter/PrintWriter --->写一行

3,对象的序列化，反序列化
1）对象序列化，就是将object转换成byte序列，反之叫做对象的反序列化
2）序列化流（ObjectOutputStream）,是过滤流 ---writeObject
反序列化流（ObjectInputStream） readObject
3)序列化接口（Serializable）
对象必须实现序列化接口，才能进行序列化，否则将出现异常
这个揭露，没有任何方法，只是一个标准
4）transient 关键字 
添加了改关键字，钙元素不会进行jvm默认的序列化，也可以自己完成这个元素的序列化
 private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        	s.defaultReadObject();
        	this.属性 = s.readInt();
        }

private void writeObject(java.io.ObjectOutputStream s)
        throws java.io.IOException{
        	s.defaultWriteObject();
        	s.writeInt(序列化的元素);
        }

分析ArrayList原码中序列化和反序列化的问题
5)序列化中子类和父类构造函数的调用问题
一个类实现了序列化接口，那么其子类都可以进行序列化
反序列化是否递归调用父类的构造函数
对子类对象进行反序列化操作时，如果其父类没有实现序列化接口，那么其父类的构造函数就会被调用













